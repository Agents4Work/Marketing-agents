'use client';

import React, { useEffect, useState, useRef, useCallback, useMemo } from "react";
import { useLocation } from "wouter";
import CollapsibleSidebar from "@/components/CollapsibleSidebar";
import { useAuth } from "@/hooks/useAuth";
import useOnboarding from "@/hooks/use-onboarding";
import DashboardOnboarding from "@/components/DashboardOnboarding";
import "../styles/scrollbar.css";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { generateContent } from "@/lib/openai";
import { cn } from "@/lib/utils";
import Modern3DCard from "@/components/ui/modern-3d-card";
import Modern3DButton from "@/components/ui/modern-3d-button";
import Modern3DHeader from "@/components/ui/modern-3d-header";
import { COLORS, SHADOWS, BORDERS, UI_COMPONENTS } from "@/styles/modern-3d-design-system";
import Interactive3DCard from "@/components/ui/interactive-3d-card";
import GlowHoverCard from "@/components/ui/glow-hover-card";
import { useDirectText } from "@/lib/direct-text";
import WelcomeSection from "@/components/dashboard/WelcomeSection";
import {
  ArrowRight,
  ArrowLeft,
  ArrowUpRight,
  FileText,
  MessageSquare,
  Layout,
  Calendar,
  Image,
  Mail,
  Megaphone,
  Search,
  Plus,
  ChevronRight,
  Sparkles,
  Copy,
  CheckCircle2,
  Pencil,
  Send,
  PenLine,
  BarChart,
  Camera,
  Zap,
  Globe,
  BarChart3,
  LineChart,
  BrainCircuit,
  Share2
} from "lucide-react";

// Placeholder data for recent documents
const recentDocuments = [
  {
    id: 1,
    title: "Q1 Marketing Campaign",
    type: "Blog Post",
    timestamp: "a day ago",
    preview: "In today's competitive landscape, businesses are constantly seeking innovative ways to reach their target audience...",
  },
  {
    id: 2,
    title: "Product Launch Email Sequence",
    type: "Email Campaign",
    timestamp: "a day ago",
    preview: "Subject: Introducing Our Revolutionary New Product...",
  },
  {
    id: 3,
    title: "Social Media Content Calendar",
    type: "Social Media",
    timestamp: "a day ago",
    preview: "Monday: Product spotlight with testimonial quote...",
  }
];

// Placeholder data for recent conversations
const recentConversations = [
  {
    id: 1,
    title: "Landing Page Discussion",
    timestamp: "a day ago",
  },
  {
    id: 2,
    title: "Product LinkedIn Post",
    timestamp: "a day ago",
  }
];

// Expanded featured categories with proper descriptions
const featuredCategories = [
  {
    id: 1,
    title: "Content Marketing",
    description: "Create SEO-optimized blogs, articles & long-form content with AI that knows your brand voice.",
    icon: <FileText className="h-8 w-8" />,
    color: "from-blue-500 to-blue-600",
    apps: ["Blog Writer", "SEO Content", "Article Generator"]
  },
  {
    id: 2,
    title: "Product Marketing",
    description: "Generate product descriptions, feature highlights & compelling benefit statements.",
    icon: <Layout className="h-8 w-8" />,
    color: "from-purple-500 to-purple-600",
    apps: ["Product Story", "Feature Writer", "USP Generator"]
  },
  {
    id: 3,
    title: "Social Media Marketing",
    description: "Create platform-specific content that drives engagement, reaches new audiences & builds community.",
    icon: <Share2 className="h-8 w-8" />,
    color: "from-pink-500 to-rose-600",
    apps: ["Post Generator", "Hashtag Finder", "Caption Writer"]
  },
  {
    id: 4,
    title: "Performance Marketing",
    description: "Craft high-converting ad copy, landing pages & CTAs that maximize ROI across all digital channels.",
    icon: <BarChart3 className="h-8 w-8" />,
    color: "from-amber-500 to-amber-600", 
    apps: ["Ad Copy Creator", "CTA Generator", "Landing Page Copy"]
  },
  {
    id: 5,
    title: "Email Marketing",
    description: "Write compelling subject lines, email sequences & newsletters that drive opens, clicks & conversions.",
    icon: <Mail className="h-8 w-8" />,
    color: "from-green-500 to-green-600",
    apps: ["Email Sequence", "Subject Line", "Newsletter Creator"]
  },
  {
    id: 6,
    title: "Video Marketing",
    description: "Generate video scripts, storyboards & captions that engage viewers across all platforms.",
    icon: <Camera className="h-8 w-8" />,
    color: "from-red-500 to-red-600",
    apps: ["Script Generator", "Storyboard", "Video Captions"]
  },
  {
    id: 7,
    title: "Analytics & Insights",
    description: "Transform raw data into actionable marketing insights with AI-powered analysis & visualizations.",
    icon: <LineChart className="h-8 w-8" />,
    color: "from-indigo-500 to-indigo-600",
    apps: ["Data Interpreter", "Insight Generator", "Report Creator"]
  },
  {
    id: 8,
    title: "AI Strategy Assistant",
    description: "Get expert guidance on marketing strategy, campaign planning & competitive analysis.",
    icon: <BrainCircuit className="h-8 w-8" />,
    color: "from-cyan-500 to-cyan-600",
    apps: ["Strategy Builder", "Campaign Planner", "Competitive Analysis"]
  }
];

// Quick action buttons with animations - with translations 
const getQuickActionButtons = (t: (key: string) => string) => [
  {
    id: 1,
    label: t("generate_blog_post"),
    icon: <PenLine size={20} />,
    color: "bg-gradient-to-r from-blue-500 to-blue-600"
  },
  {
    id: 2,
    label: t("write_ad_copy"),
    icon: <Megaphone size={20} />,
    color: "bg-gradient-to-r from-purple-500 to-purple-600"
  },
  {
    id: 3,
    label: t("create_social_post"),
    icon: <MessageSquare size={20} />,
    color: "bg-gradient-to-r from-pink-500 to-rose-600"
  },
  {
    id: 4,
    label: t("generate_image"),
    icon: <Image size={20} />,
    color: "bg-gradient-to-r from-amber-500 to-amber-600"
  }
];

const Dashboard = () => {
  const { user, loading } = useAuth();
  const { t } = useDirectText();
  const [, setLocation] = useLocation();
  const [activeDocument, setActiveDocument] = useState<number | null>(null);
  const [inputText, setInputText] = useState("");
  const [isPlaceholderAnimating, setIsPlaceholderAnimating] = useState(true);
  const [placeholderIndex, setPlaceholderIndex] = useState(0);
  const inputRef = useRef<HTMLInputElement>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  
  // Onboarding tour state
  const { 
    activeTour, 
    shouldShowTour, 
    startTour, 
    completeTour, 
    skipTour 
  } = useOnboarding();
  
  // Show dashboard tour automatically on first visit
  useEffect(() => {
    // Slight delay to ensure the dashboard renders completely
    const timer = setTimeout(() => {
      if (shouldShowTour('dashboard')) {
        startTour('dashboard');
      }
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [shouldShowTour, startTour]);
  
  // Animated placeholder text options
  const placeholders = [
    "What content do you need today?",
    "Generate an AI-powered blog post...",
    "Write high-converting ad copy...",
    "Create a social media strategy..."
  ];

  // Temporarily disable redirection to make development easier
  // useEffect(() => {
  //   if (!loading && !user) {
  //     setLocation("/");
  //   }
  // }, [user, loading, setLocation]);

  // Handle document click
  const handleDocumentClick = (id: number) => {
    setActiveDocument(id === activeDocument ? null : id);
  };

  // Content type options with enhanced descriptions for better user guidance - Memoized to prevent recreation
  const contentTypes = useMemo(() => [
    { 
      value: "text", 
      label: "General Content", 
      icon: <Pencil size={14} />,
      description: "All-purpose content for various needs",
      model: "gpt-3.5-turbo" 
    },
    { 
      value: "blog", 
      label: "Blog Post", 
      icon: <FileText size={14} />,
      description: "Long-form educational or informational content",
      model: "gpt-4" 
    },
    { 
      value: "social", 
      label: "Social Media", 
      icon: <MessageSquare size={14} />,
      description: "Engaging posts for social platforms",
      model: "gpt-3.5-turbo" 
    },
    { 
      value: "email", 
      label: "Email", 
      icon: <Mail size={14} />,
      description: "Professional email communications",
      model: "gpt-3.5-turbo" 
    },
    { 
      value: "ad", 
      label: "Ad Copy", 
      icon: <Megaphone size={14} />,
      description: "Persuasive advertising content",
      model: "gpt-3.5-turbo" 
    }
  ], []);

  // State for AI response and loading
  const [aiResponse, setAiResponse] = useState<string | null>(null);
  const [isAiLoading, setIsAiLoading] = useState<boolean>(false);
  const [showResponse, setShowResponse] = useState<boolean>(false);
  const [contentType, setContentType] = useState<string>("text");
  
  // Handle input submission with animation feedback
  const handleSendMessage = async () => {
    if (!inputText.trim()) return;
    
    setIsAiLoading(true);
    setShowResponse(true);
    
    try {
      // Use the OpenAI integration with selected content type
      const response = await generateContent(inputText, contentType);
      
      if (response && response.content) {
        setAiResponse(response.content);
      } else {
        setAiResponse("I couldn't generate a response. Please try again with a different prompt.");
      }
    } catch (error) {
      console.error("Error generating content:", error);
      setAiResponse("Sorry, there was an error processing your request. Please try again.");
    } finally {
      setIsAiLoading(false);
      setInputText("");
    }
  };

  // Animate placeholder text - optimized to reduce renders
  useEffect(() => {
    if (!isPlaceholderAnimating) return;
    
    // Using a more efficient interval approach
    const interval = setInterval(() => {
      setPlaceholderIndex((prev) => (prev + 1) % placeholders.length);
    }, 5000); // Increased time to reduce state updates
    
    return () => clearInterval(interval);
  }, [isPlaceholderAnimating, placeholders.length]);
  
  // Focus the input on component mount
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  // Horizontal scroll handlers for featured categories - memoized to prevent recreating functions
  const scrollLeft = useCallback(() => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({ left: -300, behavior: 'smooth' });
    }
  }, []);

  const scrollRight = useCallback(() => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({ left: 300, behavior: 'smooth' });
    }
  }, []);
  
  // Get translated quick action buttons
  const quickActionButtons = useMemo(() => getQuickActionButtons(t), [t]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="flex h-screen overflow-hidden bg-gray-50 dark:bg-gray-900">
      <CollapsibleSidebar />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        <main className="flex-1 overflow-auto py-8">
          <div className="max-w-6xl mx-auto px-6 space-y-8">
            {/* Hero section with Modern3D Welcome Component */}
            <WelcomeSection
              inputText={inputText}
              setInputText={setInputText}
              placeholderText={placeholders[placeholderIndex]}
              onSendMessage={handleSendMessage}
              inputRef={inputRef}
            />
            
            {/* AI Response Section - Optimized with conditional rendering and CSS transitions */}
            {showResponse && (
              <div
                className="mt-8 max-w-3xl mx-auto transition-all duration-300 ease-in-out transform-gpu opacity-100"
                style={{
                  maxHeight: showResponse ? '2000px' : '0',
                  opacity: showResponse ? 1 : 0,
                  overflow: 'hidden'
                }}
              >
                  <Card className="overflow-hidden border border-primary/20 shadow-lg bg-white dark:bg-gray-800">
                    <CardContent className="p-6">
                      {isAiLoading ? (
                        <div className="flex flex-col items-center justify-center py-8">
                          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                          <p className="text-gray-500 dark:text-gray-400">Thinking...</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          <div className="flex items-center gap-2 mb-4">
                            <div className="bg-primary/10 p-2 rounded-full">
                              <BrainCircuit className="h-6 w-6 text-primary" />
                            </div>
                            <div>
                              <h3 className="font-semibold text-lg">AI Assistant</h3>
                              <div className="flex items-center gap-2">
                                <p className="text-xs text-gray-500">AI-powered response</p>
                                <Badge 
                                  variant="outline" 
                                  className="text-xs bg-primary/5 hover:bg-primary/5 text-primary border-primary/20"
                                >
                                  {contentTypes.find(t => t.value === contentType)?.label || "Content"}
                                </Badge>
                              </div>
                            </div>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="ml-auto text-gray-500 hover:text-gray-700"
                              onClick={() => setShowResponse(false)}
                            >
                              <span className="sr-only">Close</span>
                              <div className="h-5 w-5 flex items-center justify-center">×</div>
                            </Button>
                          </div>
                          <div className="prose dark:prose-invert max-w-none">
                            {aiResponse && aiResponse.split('\n').map((line, i) => (
                              <p key={i} className={line.trim() === '' ? 'my-3' : ''}>
                                {line}
                              </p>
                            ))}
                          </div>
                          <div className="flex justify-end gap-2 mt-4 pt-2 border-t border-gray-200 dark:border-gray-700">
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex items-center gap-1"
                              onClick={() => {
                                navigator.clipboard.writeText(aiResponse || '');
                                // You would add a toast notification here in a real app
                              }}
                            >
                              <Copy className="h-3.5 w-3.5" />
                              <span>Copy</span>
                            </Button>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}
              
              {/* Content Type Selection - Hidden initially, shows with animation when AI panel is active */}
              {showResponse && (
                <div className="mt-4 max-w-3xl mx-auto">
                  <div className="flex flex-wrap justify-center gap-2 text-sm">
                    {contentTypes.map((type) => (
                      <Badge
                        key={type.value}
                        variant={contentType === type.value ? "default" : "outline"}
                        className={`py-1.5 px-3 cursor-pointer transition-all duration-200 ${
                          contentType === type.value 
                            ? "bg-primary hover:bg-primary/90" 
                            : "hover:bg-primary/10 text-gray-600 dark:text-gray-300"
                        }`}
                        onClick={() => setContentType(type.value)}
                      >
                        <span className="flex items-center gap-1">
                          {type.icon}
                          {type.label}
                        </span>
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Quick Action Buttons - Animated entrance with staggered delay */}
            <div className="mb-8 quick-actions">
              <Modern3DHeader
                title={t('quick_actions')}
                size="md"
                accentColor="from-primary to-primary/90"
                className="mb-4"
              />
              <div className="grid grid-cols-2 gap-4 sm:grid-cols-4">
                {quickActionButtons.map((button, index) => (
                  <div 
                    key={button.id} 
                    className="animate-fadeIn" 
                    style={{ animationDelay: `${index * 0.1}s` }}
                  >
                    <Modern3DButton 
                      variant="gradient"
                      size="lg"
                      fullWidth
                      icon={button.icon}
                      gradientClass={button.color}
                      onClick={() => setInputText(button.label)}
                    >
                      {button.label}
                    </Modern3DButton>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Quick access cards with Modern3D Card components */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-5 mb-8">
              <Modern3DCard
                title="Create a document"
                description="Start fresh with an AI-powered blank document"
                accentColor="bg-blue-500"
                delay={0}
                headerContent={
                  <div className="flex items-center gap-3">
                    <div className="bg-gradient-to-br from-blue-500 to-blue-600 text-white p-3 rounded-xl shadow-md">
                      <FileText className="h-6 w-6" />
                    </div>
                    <div>
                      <h3 className="text-xl font-semibold">Create a document</h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Start fresh with an AI-powered blank document</p>
                    </div>
                  </div>
                }
              >
                <div className="flex justify-end">
                  <Modern3DButton 
                    variant="ghost" 
                    size="sm"
                    icon={<ArrowUpRight className="h-4 w-4" />}
                  >
                    <span className="sr-only">View</span>
                  </Modern3DButton>
                </div>
              </Modern3DCard>
              
              <Modern3DCard
                title="Start a conversation"
                description="Use Chat to brainstorm ideas or conduct research"
                accentColor="bg-purple-500"
                delay={1}
                headerContent={
                  <div className="flex items-center gap-3">
                    <div className="bg-gradient-to-br from-purple-500 to-purple-600 text-white p-3 rounded-xl shadow-md">
                      <MessageSquare className="h-6 w-6" />
                    </div>
                    <div>
                      <h3 className="text-xl font-semibold">Start a conversation</h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Use Chat to brainstorm ideas or conduct research</p>
                    </div>
                  </div>
                }
              >
                <div className="flex justify-end">
                  <Modern3DButton 
                    variant="ghost" 
                    size="sm"
                    icon={<ArrowUpRight className="h-4 w-4" />}
                  >
                    <span className="sr-only">View</span>
                  </Modern3DButton>
                </div>
              </Modern3DCard>
              
              <Modern3DCard
                title="Discover AI Apps"
                description="Find specialized AI tools to boost your marketing"
                accentColor="bg-emerald-500"
                delay={2}
                headerContent={
                  <div className="flex items-center gap-3">
                    <div className="bg-gradient-to-br from-emerald-500 to-emerald-600 text-white p-3 rounded-xl shadow-md">
                      <Zap className="h-6 w-6" />
                    </div>
                    <div>
                      <h3 className="text-xl font-semibold">Discover AI Apps</h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Find specialized AI tools to boost your marketing</p>
                    </div>
                  </div>
                }
              >
                <div className="flex justify-end">
                  <Modern3DButton 
                    variant="ghost" 
                    size="sm"
                    icon={<ArrowUpRight className="h-4 w-4" />}
                  >
                    <span className="sr-only">View</span>
                  </Modern3DButton>
                </div>
              </Modern3DCard>
            </div>
            
            {/* Recent Documents and Conversations */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
              {/* Recent Documents */}
              <div>
                <Modern3DHeader
                  title="Recent documents"
                  size="sm"
                  accentColor="from-blue-500 to-blue-600"
                  className="mb-4"
                  action={
                    <Modern3DButton 
                      variant="ghost" 
                      size="sm"
                      className="flex items-center"
                      icon={<ChevronRight className="ml-1 h-4 w-4" />}
                    >
                      View all
                    </Modern3DButton>
                  }
                />
                <div className="space-y-4">
                  {recentDocuments.map((doc, index) => index < 2 && (
                    <div
                      key={doc.id}
                      className="transform"
                    >
                      <GlowHoverCard 
                        glowColor="from-blue-500/20 via-blue-500/10 to-blue-500/0"
                        hoverScale={1.02}
                        backgroundColor="bg-white dark:bg-gray-800"
                        glowIntensity={0.5}
                        glowSize={3}
                        border={BORDERS.sm}
                        shadow={SHADOWS.md}
                      >
                        <CardContent className="p-4">
                          <div className="flex justify-between mb-2">
                            <h4 className="font-medium text-lg">{doc.title}</h4>
                            <span className="text-xs text-gray-500 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
                              {doc.timestamp}
                            </span>
                          </div>
                          <Badge className={cn(
                            "mb-2",
                            "rounded-full border-2 border-black px-2 py-0.5 text-xs font-bold shadow-[2px_2px_0px_0px_rgba(0,0,0,0.9)]",
                            "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300"
                          )}>
                            {doc.type}
                          </Badge>
                          <p className="text-sm text-gray-600 dark:text-gray-300 mt-2 line-clamp-1">{doc.preview}</p>
                          <div className="flex gap-2 mt-3">
                            <Modern3DButton 
                              variant="ghost" 
                              size="sm" 
                              icon={<Pencil className="h-3.5 w-3.5 mr-1" />}
                              className="text-sm"
                            >
                              Edit
                            </Modern3DButton>
                            <Modern3DButton 
                              variant="ghost" 
                              size="sm" 
                              icon={<Copy className="h-3.5 w-3.5 mr-1" />}
                              className="text-sm"
                            >
                              Copy
                            </Modern3DButton>
                          </div>
                        </CardContent>
                      </GlowHoverCard>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Recent Conversations */}
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-semibold flex items-center gap-2">
                    <MessageSquare className="h-5 w-5 text-primary" />
                    Recent conversations
                  </h3>
                  <Button variant="ghost" size="sm" className="text-primary hover:text-primary/90">
                    View all
                    <ChevronRight className="ml-1 h-4 w-4" />
                  </Button>
                </div>
                <div className="space-y-4">
                  {recentConversations.map((conv) => (
                    <div
                      key={conv.id}
                      className="transform"
                    >
                      <GlowHoverCard 
                        glowColor="from-primary/20 via-primary/10 to-primary/0"
                        hoverScale={1.02}
                        backgroundColor="bg-white dark:bg-gray-800"
                        glowIntensity={0.5}
                        glowSize={3}
                      >
                        <CardContent className="p-4">
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="bg-primary/10 text-primary p-2 rounded-full">
                                <MessageSquare className="h-4 w-4" />
                              </div>
                              <div>
                                <h4 className="font-medium text-lg">{conv.title}</h4>
                                <span className="text-xs text-gray-500">{conv.timestamp}</span>
                              </div>
                            </div>
                            <Button variant="ghost" size="sm" className="text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary">
                              <ArrowUpRight className="h-4 w-4" />
                            </Button>
                          </div>
                        </CardContent>
                      </GlowHoverCard>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Featured Categories - Horizontally Scrollable */}
            <div className="mb-8 relative categories-container">
              <div className="flex justify-between items-center mb-5">
                <Modern3DHeader
                  title="Featured categories"
                  size="md"
                  accentColor="from-primary to-primary/90"
                  badge="New"
                  className="mb-0"
                  action={
                    <div className="flex gap-2">
                      <Modern3DButton 
                        onClick={scrollLeft} 
                        variant="outline" 
                        size="sm"
                        icon={<ArrowLeft className="h-4 w-4" />}
                      >
                        <span className="sr-only">Scroll left</span>
                      </Modern3DButton>
                      <Modern3DButton 
                        onClick={scrollRight} 
                        variant="outline"
                        size="sm" 
                        icon={<ArrowRight className="h-4 w-4" />}
                      >
                        <span className="sr-only">Scroll right</span>
                      </Modern3DButton>
                    </div>
                  }
                />
              </div>

              {/* Scrollable container */}
              <div 
                ref={scrollContainerRef}
                className="overflow-x-auto hide-scrollbar pb-4 -mx-4 px-4"
              >
                <div className="flex space-x-5" style={{ minWidth: 'max-content' }}>
                  {featuredCategories.map((category) => (
                    <div
                      key={category.id}
                      className="w-72"
                    >
                      <Interactive3DCard 
                        depth={2}
                        hoverScale={1.04}
                        rotationIntensity={0.3}
                        backgroundColor="bg-white dark:bg-gray-800"
                        className="h-full"
                      >
                        <div className={`h-2 w-full bg-gradient-to-r ${category.color}`} />
                        <CardContent className="p-5">
                          <div className={`w-14 h-14 rounded-lg bg-gradient-to-br ${category.color} text-white p-3 shadow-md mb-4 flex items-center justify-center`}>
                            {category.icon}
                          </div>
                          <h4 className="font-semibold text-lg mb-2">{category.title}</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-2">{category.description}</p>
                          
                          <div className="space-y-2 mt-auto">
                            <h5 className="text-xs font-medium text-gray-500 uppercase">Popular apps</h5>
                            <div className="flex flex-wrap gap-2">
                              {category.apps.map((app, idx) => (
                                <Badge key={idx} variant="secondary" className="bg-gray-100 hover:bg-gray-200 text-gray-800">
                                  {app}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </CardContent>
                      </Interactive3DCard>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Custom styles for hiding scrollbar are in separate CSS */}
            </div>
          </div>
        </main>
      </div>

      {/* Dashboard Onboarding Tour */}
      <DashboardOnboarding 
        isOpen={activeTour === 'dashboard'}
        onComplete={() => completeTour('dashboard')}
        onSkip={() => skipTour('dashboard')}
      />
    </div>
  );
};

export default Dashboard;
